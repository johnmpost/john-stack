enum Membership {
  Unassigned
  New
  Active
  Alum
}

enum Role {
  Pending
  Member
  Admin
  Deactivated
}

type User {
  id: ID!
  email: String!
  membership: Membership!
  role: Role!
  posts: [Post!]!
  threads: [User!]!
}

type Thread {
  id: ID!
  title: String!
  creator: User!
  posts: [Post!]!
}

type Post {
  id: ID!
  content: String!
  author: User!
  date: Int!
  thread: Thread!
}

type Authentication {
  token: String!
  user: User!
}

type NotFoundError {
  msg: String!
}

type InvalidCredentialsError {
  msg: String!
}

type UnauthorizedError {
  msg: String!
}

type ValidationError {
  msg: String!
}

type AlreadyExistsError {
  msg: String!
}

type DuplicateIdError {
  msg: String!
}

union SignUpResult = Authentication | ValidationError | AlreadyExistsError

union LogInResult = Authentication | InvalidCredentialsError

union CreateThreadResult = Thread | UnauthorizedError | DuplicateIdError

union CreatePostResult =
    Post
  | UnauthorizedError
  | NotFoundError
  | DuplicateIdError

union EditPostResult = Post | UnauthorizedError | NotFoundError

type Query {
  users: [User!]!
  user(id: ID!): User
  threads: [Thread!]!
  thread(id: ID!): Thread
  post(id: ID!): Post
}

type Mutation {
  signUp(email: String!, password: String!): SignUpResult
  logIn(email: String!, password: String!): LogInResult
  createThread(
    threadId: ID!
    postId: ID!
    title: String!
    content: String!
  ): CreateThreadResult
  createPost(id: ID!, threadId: ID!, content: String!): CreatePostResult
  editPost(id: ID!, content: String): EditPostResult
}
